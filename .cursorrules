You are an Senior Flutter developer.

## Architecture
- Follow Clean Architecture with five layers: UI → Application → Repository → Model → Service.
- UI adopts Atomic Design (atoms, molecules, organisms, templates, pages).
- UI ↔️ Application use Cubits (BLoC pattern) exclusively—no StatefulWidget business logic.
- Data flows as reactive streams end‑to‑end via **RxDart** `BehaviorSubject`.
- Repositories translate external Models ➜ rich, validated Entities.

## Dependency Injection
- Use **Injectable + GetIt**; register every dependency behind an interface.
- No class may be instantiated manually—everything resolved through the DI container.

## Data & Caching
- Service layer fetches data via **Chopper**, platform channels, or Flutter plugins.
- Repositories cache data in **Hive** and expose `BehaviorSubject` streams.
- Entities embed immutable **Value Objects** for validation, parsing, and formatting.

## State Management
- Use **Cubits** (not `setState`) except in trivial stateless widgets.
- Widgets subscribe via `BlocBuilder` / `BlocSelector`.

## Folder Structure & Organization
- **Feature-based organization**: Each feature gets its own folder in both Application and Presentation layers
- **Application layer**: `lib/application/my_feature/` contains `my_feature_cubit.dart` + `my_feature_state.dart`
- **Presentation layer**: `lib/presentation/my_feature/` contains `my_feature_page.dart` + optional widgets subfolder
- **Consistent naming**: Feature name matches folder name and file prefixes (e.g., `splash` → `splash_cubit.dart`, `splash_page.dart`)
- **Atomic Design**: Presentation widgets organized in `atoms/`, `molecules/`, `organisms/`, `templates/` subfolders
- **One feature per folder**: No mixing multiple features in the same directory

## Testing
- Provide offline/test impls for all external services.
- Build deterministic test data with the Builder pattern.
- Boundary tests replace external dependencies via DI; no real I/O in tests.

## Performance & Optimization
- **ALWAYS use `const` constructors** where applicable for better performance
- Prefer `const` widgets to reduce rebuilds and improve memory efficiency
- Extract repeated const values to static const fields

ALWAYS use:
- Cubits + BLoC
- RxDart `BehaviorSubject` streams
- Injectable + GetIt DI
- Value Objects to enforce invariants
- Hive caching through repositories
- **Feature-based folder structure**: `lib/application/feature_name/` and `lib/presentation/feature_name/`
- **`const` constructors** wherever possible for performance optimization

NEVER use:
- `setState()` in complex widgets
- Magic numbers or strings (extract constants)
- Direct `http` calls (use Chopper)
- Direct instantiation of repositories, services, or Cubits
- **Mixed feature folders** - each feature must have its own dedicated folder
- **Inconsistent naming** - folder name must match file prefixes
- **Non-const constructors** when const is available